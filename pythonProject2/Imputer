binary_cols = []
for col in df_train.columns:
    unique_vals = df_train[col].unique()
    if len(unique_vals) <= 3:
        binary_cols.append(col)

#print("Binary columns:", binary_cols)
binary_cols = [col for col in binary_cols if col not in ['MechVentDuration', 'MechVentLast8Hour', 'UrineOutputSum', 'In-hospital_death']]
       
binary_medians = {}

for col in binary_cols:
    col_median = df_train[col].median(skipna=True)
    #binary_medians.append(col_median)
    df_train[col] = df_train[col].fillna(col_median)
    binary_medians[col] = col_median



X = df.drop('In-hospital_death', axis=1)
y = df['In-hospital_death']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
df_train = pd.concat([X_train, y_train], axis=1)



corr_threshold = 0.05

corr_with_target = df_train.corr()['In-hospital_death']

cols_to_impute_less = corr_with_target[(corr_with_target < corr_threshold) & (corr_with_target > -corr_threshold)].index.tolist()

for coll in ['CSRU', 'MechVentDuration', 'MechVentLast8Hour', 'UrineOutputSum', 'In-hospital_death']:
    if coll in cols_to_impute_less:
        cols_to_impute_less.remove(coll)
        
imputer_less = KNNImputer(n_neighbors=5)

for col in cols_to_impute_less:
    if df_train[col].isna().sum() != 0: 
        corr_with_col = df_train.corr()[col].abs()
        top_cols = corr_with_col.sort_values(ascending=False).iloc[1:11].index.tolist()
        df_train[col] = imputer_less.fit_transform(df_train[top_cols])[:, 0]
       
imputer_less.fit(df_train[cols_to_impute_less])



corr_threshold = 0.05

corr_with_target = df_train.corr()['In-hospital_death'].abs()

cols_to_impute_more = corr_with_target[corr_with_target > corr_threshold].index.tolist()

for coll in ['CSRU', 'MechVentDuration', 'MechVentLast8Hour', 'UrineOutputSum', 'In-hospital_death']:
    if coll in cols_to_impute_more:
        cols_to_impute_more.remove(coll)

imputer_more = KNNImputer(n_neighbors=5)

for col in cols_to_impute_more:
    if df_train[col].isna().sum() != 0:  
        corr_with_col = X_train.corr()[col].abs()
        top_cols = corr_with_col.sort_values(ascending=False).iloc[1:11].index.tolist()
        df_train[col] = imputer_more.fit_transform(df_train[top_cols])[:, 0]

imputer_more.fit(df_train[cols_to_impute_more])
